apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  labels:
    app: {{ .Values.name }}
    appVersion: {{ .Values.appVersion }}
    component: {{ .Values.metadata.labels.component }}
    environment: {{ .Values.metadata.labels.environment }}
    owner: {{ .Values.metadata.labels.owner }}
    state: {{ .Values.metadata.labels.state }}
    tier: {{ .Values.metadata.labels.tier }}
    supportemail: {{ .Values.metadata.labels.supportemail }}
    projectalias: {{ .Values.metadata.labels.projectalias }}
    byolsoftware: {{ .Values.metadata.labels.byolsoftware }}
    businessunit: {{ .Values.metadata.labels.businessunit }}
    application: {{ .Values.metadata.labels.application }}
    compliancedomain: {{ .Values.metadata.labels.compliancedomain }}
    region: {{ .Values.metadata.labels.region }}
    os_support_owner: {{ .Values.metadata.labels.os_support_owner }}
    application_support_owner: {{ .Values.metadata.labels.application_support_owner }}
    business_service: {{ .Values.metadata.labels.business_service }}
    alliance: {{ .Values.metadata.labels.alliance }}
    provisionedby: {{ .Values.metadata.labels.provisionedby }}
    version: {{ .Values.metadata.labels.version }}
    name: {{ .Values.metadata.labels.name }}
    data_class: {{ .Values.metadata.labels.data_class }}
    division: "{{ .Values.metadata.labels.division }}"
    cost_center: "{{ .Values.metadata.labels.cost_center }}"
    cmdb_bus_svc_id: {{ .Values.metadata.labels.cmdb_bus_svc_id }}
  {{- if .Values.datadog.enabled }}
  annotations:
    admission.datadoghq.com/config-mode: service
    admission.datadoghq.com/enabled: "true"
    tags.datadoghq.com/env: {{ .Values.datadog.env }}
    tags.datadoghq.com/service: {{ .Values.datadog.service }}
    tags.datadoghq.com/version: {{ .Values.appVersion }}
    tags.datadoghq.com/alliance: {{ .Values.datadog.alliance }}
    tags.datadoghq.com/application_support_owner: {{ .Values.datadog.support_owner }}
    tags.datadoghq.com/business_application: {{ .Values.datadog.bus_bap_id }}
    tags.datadoghq.com/business_application_name: {{ .Values.datadog.bus_application_name }}
    tags.datadoghq.com/business_service: {{ .Values.datadog.bus_svc_id }}
    tags.datadoghq.com/business_service_name: {{ .Values.datadog.bus_service_name }}
    tags.datadoghq.com/os_support_owner: {{ .Values.datadog.support_owner }}
    tags.datadoghq.com/page_out: "{{ .Values.datadog.page_out }}"
  {{- end }}
spec:
  selector:
    matchLabels:
      {{- if ne .Values.metadata.labels.environment "ci" }}
      role: {{ .Values.deployment.podRole }}
      {{- end }}
      app: {{ .Values.name }}
  strategy:
    type: Recreate
  replicas: {{ .Values.deployment.replicas }}
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
        appVersion: {{ .Values.appVersion }}
        {{- if ne .Values.metadata.labels.environment "ci" }}
        role: {{ .Values.deployment.podRole }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Values.service.env.serviceAccountName }}
      automountServiceAccountToken: true
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      initContainers:
        {{- if .Values.volumePermissions.enabled }}
        - name: volume-permissions
          image: {{ .Values.imageSha }}
          imagePullPolicy: {{ .Values.deployment.imagePullPolicy }}
          command:
            - /bin/sh
            - -c
            - chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }} /var/opt/sl/data
          securityContext:
            runAsUser: 0
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: {{ .Values.deployment.volumes.name }}
              mountPath: "/var/opt/sl/data"
        {{- end }}
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.imageSha }}
          imagePullPolicy: {{ .Values.deployment.imagePullPolicy }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
          {{- end }}
          env:
            - name: SL_INSTANCE_TYPE
              value: {{ .Values.deployment.containers.env.instanceType }}
            - name: SL_INIT
              value: {{ .Values.deployment.containers.env.init }}
            - name: SL_METRICS_ENABLED
              value: "true"
            - name: SL_DECISION_EVALUATION
              value: "true"
            - name: SL_METRICS_DEPLOYMENT_MANAGER
              value: "true"
            - name: SL_METRICS_DECISION_METRICS
              value: "true"
            - name: SL_ENCRYPTION_ALGORITHM
              value: "AES"
            - name: SL_ENCRYPTION_KEY_SIZE
              value: "256"
            {{- if .Values.deployment.containers.env.disableWebsockets }}
            - name: SL_DISABLE_SSE
              value: "true"
            - name: SL_DISABLE_WEBSOCKETS
              value: "true"
            {{- end }}
            {{- if .Values.deployment.containers.env.contentSecurityPolicy }}
            - name: SL_CONTENT_SECURITY_POLICY
              value: "{{ .Values.deployment.containers.env.contentSecurityPolicy }}"
            {{- end }}
            - name: SMARTS_PRIMARY_HOST
              value: "{{ .Values.deployment.containers.env.primaryHost }}"
            - name: SMARTS_REPLICA_HOST
              value: "{{ .Values.deployment.containers.env.replicaHost }}"
            - name: RAVEN_SECURITY_DO_NOT_CONSIDER_MEMORY_LOCK_FAILURE_AS_CATASTROPHIC_ERROR
              value: "true"
            - name: DD_APPSEC_ENABLED
              value: "{{ .Values.deployment.containers.env.DD_APPSEC_ENABLED }}"
            - name: DD_PROFILING_ENABLED
              value: "{{ .Values.deployment.containers.env.DD_PROFILING_ENABLED }}"
            - name: DD_PROFILING_ALLOCATION_ENABLED
              value: "{{ .Values.deployment.containers.env.DD_PROFILING_ALLOCATION_ENABLED }}"
            - name: DD_PROFILING_DDPROF_ENABLED
              value: "{{ .Values.deployment.containers.env.DD_PROFILING_DDPROF_ENABLED }}"
            - name: DD_PROFILING_DDPROF_CPU_ENABLED
              value: "{{ .Values.deployment.containers.env.DD_PROFILING_DDPROF_CPU_ENABLED }}"
            - name: DD_TRACE_HEADER_TAGS
              value: "{{ .Values.deployment.containers.env.DD_TRACE_HEADER_TAGS }}"
            - name: DD_LOGS_INJECTION
              value: "{{ .Values.deployment.containers.env.DD_LOGS_INJECTION }}"
            - name: DD_PROFILING_DIRECTALLOCATION_ENABLED
              value: "{{ .Values.deployment.containers.env.DD_PROFILING_DIRECTALLOCATION_ENABLED }}"
            - name: DD_PROFILING_HEAP_ENABLED
              value: "{{ .Values.deployment.containers.env.DD_PROFILING_HEAP_ENABLED }}"
            - name: VAULT_URI
              value: "{{ .Values.deployment.containers.env.vault_uri }}"
            - name: VAULT_ROLE
              value: "{{ .Values.deployment.containers.env.vault_role }}"
            - name: VAULT_SVC_ID
              value: "{{ .Values.deployment.containers.env.vault_svc_id }}"
            - name: VAULT_PROJ_ID
              value: "{{ .Values.deployment.containers.env.vault_proj_id }}"
            - name: VAULT_BACKEND
              value: "{{ .Values.deployment.containers.env.vault_backend }}"
            - name: 551_CERT_BUCKET_NAME
              value: "{{ .Values.deployment.containers.env.551_cert_bucket_name }}"
            - name: 551_CERT_PATH
              value: "{{ .Values.deployment.containers.env.ssl_cert_path }}"
            - name: 551_CERT_FILE_NAME
              value: "{{ .Values.deployment.containers.env.ssl_cert_file_name }}"
            - name: CONFIG_PROFILE
              value: "{{ .Values.deployment.containers.env.config_profile }}"
            {{- if or .Values.deployment.proxy.enabled }}
            - name: HTTP_PROXY
              value: "{{ .Values.deployment.containers.env.proxy }}"
            - name: HTTPS_PROXY
              value: "{{ .Values.deployment.containers.env.proxy }}"
            - name: NO_PROXY
              value: "{{ .Values.deployment.containers.env.noproxy }}"
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health/live
              port: {{ .Values.service.env.containerHttpsPort }}
              scheme: HTTPS
            initialDelaySeconds: {{ .Values.deployment.containers.env.livenessProbeDelaySeconds }}
            periodSeconds: {{ .Values.deployment.containers.env.livenessProbePeriodSeconds | default 30 }}
            timeoutSeconds: {{ .Values.deployment.containers.env.livenessProbeTimeoutSeconds | default 3 }}
            failureThreshold: {{ .Values.deployment.containers.env.livenessProbeFailureThreshold | default 3 }}
            successThreshold: {{ .Values.deployment.containers.env.livenessProbeSuccessThreshold | default 1 }}
          readinessProbe:
            httpGet:
              path: /health/ready
              port: {{ .Values.service.env.containerHttpsPort }}
              scheme: HTTPS
            initialDelaySeconds: {{ .Values.deployment.containers.env.readinessProbeDelaySeconds }}
            periodSeconds: {{ .Values.deployment.containers.env.readinessProbePeriodSeconds | default 30 }}
            timeoutSeconds: {{ .Values.deployment.containers.env.readinessProbeTimeoutSeconds | default 3 }}
            failureThreshold: {{ .Values.deployment.containers.env.readinessProbeFailureThreshold | default 3 }}
            successThreshold: {{ .Values.deployment.containers.env.readinessProbeSuccessThreshold | default 1 }}
          volumeMounts:
            - name: {{ .Values.deployment.volumes.name }}
              mountPath: "/var/opt/sl/data"
        {{- if .Values.sidecar.enabled }}
        - name: bluepen
          image: gcr.io/iaas-gcr-reg-prd-ad3d/appsvcs-drew/bluepen:vienna.8.2-python-3.11
          imagePullPolicy: IfNotPresent
          {{- if .Values.sidecar.securityContext }}
          securityContext:
            runAsUser: {{ .Values.sidecar.securityContext.runAsUser }}
            runAsGroup: {{ .Values.sidecar.securityContext.runAsGroup }}
          {{- end }}
          env:
            - name: BLUEPEN_ENV
              value: "{{ .Values.sidecar.env.BLUEPEN_ENV }}"
            {{- if .Values.sidecar.env.EXTRA_ENV }}
            - name: EXTRA_ENV
              value: "{{ .Values.sidecar.env.EXTRA_ENV }}"
            {{- end }}
          volumeMounts:
            - name: {{ .Values.deployment.volumes.name }}
              mountPath: "/var/opt/sl/data"
        {{- end }}
      volumes:
        - name: {{ .Values.deployment.volumes.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.deployment.volumes.persistentVolumeClaim.name }}
